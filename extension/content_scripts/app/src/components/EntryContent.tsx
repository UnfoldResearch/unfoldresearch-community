import { ReactNode, useState } from 'react';
import { EntryFull, isEntryAutogenerated } from 'unfold-core';
import { Button } from 'unfold-ui';
import { Popover2 } from '@blueprintjs/popover2';
import { EntryPostingMeta } from './EntryPostingMeta';
import { EntryFormat } from './EntryFormat';
import { EntryLinkedTo } from './EntryLinkedTo';
import { EntryTitle } from './EntryTitle';
import { EntryVoter } from './EntryVoter';
import { useNavigation } from '../utils/useNavigation';
import { useAuth } from '../utils/useAuth';
import { ContentDescriptors } from './content';
import { FilesInput } from './FilesInput';
import api from '../utils/api';
import analytics from '../utils/analytics';
import { SaveEntryButton } from './SaveEntryButton';
import { FollowEntryButton } from './FollowEntryButton';

type EntryContentProps = {
  entry: EntryFull;
  // components that can override the original actions
  // (used for Preview mode on Submit screen)
  actions?: ReactNode;
};

export const EntryContent = ({ entry, actions }: EntryContentProps): JSX.Element => {
  const { goToReport, goToBrowse } = useNavigation<'browse'>();
  const { user } = useAuth();

  const [actionsOpen, setActionsOpen] = useState(false);

  const isAutogenerated = isEntryAutogenerated(entry);
  const isUserAuthor = user?.id === entry.createdBy.id;

  const ContentComponent = ContentDescriptors[entry.content.type].component;

  return (
    <div className="h-full overflow-hidden pb-3">
      <div className="flex items-center justify-between py-2">
        <EntryVoter entry={entry} />

        {actions ? (
          actions
        ) : (
          <div>
            {/* <Button minimal icon="file-download">
          Download
        </Button> */}
            <SaveEntryButton entry={entry} />
            {/* <Button minimal icon="book-open">
          Cite
        </Button> */}
            <FollowEntryButton entry={entry} />
            {!isAutogenerated && (
              <Popover2
                usePortal={false}
                isOpen={actionsOpen}
                onClose={() => setActionsOpen(false)}
                content={
                  <div className="flex flex-col">
                    {isUserAuthor && (
                      <>
                        {/* <Button minimal icon="note-text">
                      Edit
                    </Button> */}
                        <Button
                          minimal
                          icon="trash"
                          onClick={async () => {
                            setActionsOpen(false);

                            await api.entry.delete({
                              entryId: entry.id,
                            });

                            analytics.events.track('ext.entry.deleted', {
                              title: entry.title,
                              id: entry.id,
                            });

                            const parent = entry.parent;
                            parent && goToBrowse(parent);
                          }}
                        >
                          Delete
                        </Button>
                      </>
                    )}
                    {/* <hr className="my-1" /> */}
                    {/* <Button minimal icon="clock">
                  History
                </Button> */}
                    {/* <Button minimal icon="email">
                  Share
                </Button> */}
                    {!isUserAuthor && (
                      <Button
                        minimal
                        className="rounded-none"
                        icon="flag-2"
                        onClick={() => {
                          goToReport(entry);
                          setActionsOpen(false);
                        }}
                      >
                        Report
                      </Button>
                    )}
                  </div>
                }
                minimal
                position="bottom-right"
                popoverClassName="shadow-none shadow-lg border border-gray-200"
              >
                <Button
                  icon="more-vert"
                  minimal
                  onClick={() => {
                    setActionsOpen(!actionsOpen);
                  }}
                />
              </Popover2>
            )}
          </div>
        )}
      </div>

      <div className="mb-0.5 grid grid-cols-m1 items-center gap-1 overflow-hidden">
        <EntryFormat format={entry.format} />
        <EntryLinkedTo entry={entry} />
      </div>

      <EntryTitle title={entry.title} className="mb-3 font-semibold" />

      <ContentComponent
        isPreview
        // @ts-ignore
        data={entry.content.data}
        setData={(/* mock */) => {}}
      />

      {entry.files && entry.files.length > 0 && (
        <div className="pt-3">
          <FilesInput files={entry.files} />
        </div>
      )}

      <div className="flex flex-col gap-1 pt-3">
        {!isAutogenerated && <EntryPostingMeta entry={entry} type="posted" />}

        {/* <EntryTags entry={entry} /> */}
      </div>
    </div>
  );
};
