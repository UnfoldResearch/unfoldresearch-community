import { ReactNode, useState } from 'react';
import { EntryFull, isAuthorBot } from 'unfold-core';
import { Button, EntryTitle, EntryVoter, EntryPostingMeta, EntryLinkedTo } from 'unfold-ui';
import { FormatContentComponent, FormatMeta, Format as NarrowFormat } from 'unfold-plugins';
import { Popover2 } from '@blueprintjs/popover2';

import { useNavigation } from '../utils/useNavigation';
import { useAuth } from '../utils/useAuth';
import { FilesInput } from './FilesInput';
import api from '../utils/api';
import analytics from '../utils/analytics';
import { SaveEntryButton } from './SaveEntryButton';
import { FollowEntryButton } from './FollowEntryButton';

type EntryContentProps = {
  entry: EntryFull;
  // components that can override the original actions
  // (used for Preview mode on Submit screen)
  actions?: ReactNode;
};

export const EntryContent = ({ entry, actions }: EntryContentProps): JSX.Element => {
  const {
    goToReport,
    goToBrowse,
    goToUser,
    current: { setVote },
  } = useNavigation<'browse'>();
  const { user } = useAuth();

  const [actionsOpen, setActionsOpen] = useState(false);

  const isUserAuthor = user?.id === entry.createdBy.id;
  const isAutogenerated = isAuthorBot(entry.createdBy.id);

  return (
    <div className="h-full overflow-hidden pb-3">
      <div className="flex items-center justify-between py-2">
        <EntryVoter
          score={entry.score}
          vote={entry.vote}
          disabled={isUserAuthor}
          onUpvote={async () => {
            const isUpvote = entry.vote === 'upvote';

            const res = await api.vote.vote({
              entryId: entry.id,
              type: isUpvote ? null : 'upvote',
            });

            if (res) {
              setVote({
                vote: res.hasVoted,
                score: res.score,
              });
              analytics.events.track('ext.vote.voted', {
                entryId: entry.id,
                title: entry.title,
                authorId: entry.createdBy.id,
                authorDisplayName: entry.createdBy.displayName,
                type: isUpvote ? 'rm-upvote' : 'upvote',
              });
            }
          }}
          onDownvote={async () => {
            const isDownvote = entry.vote === 'upvote';

            const res = await api.vote.vote({
              entryId: entry.id,
              type: isDownvote ? null : 'downvote',
            });

            if (res) {
              setVote({
                vote: res.hasVoted,
                score: res.score,
              });
              analytics.events.track('ext.vote.voted', {
                entryId: entry.id,
                title: entry.title,
                authorId: entry.createdBy.id,
                authorDisplayName: entry.createdBy.displayName,
                type: isDownvote ? 'rm-downvote' : 'downvote',
              });
            }
          }}
        />

        {actions ? (
          actions
        ) : (
          <div>
            {/* <Button minimal icon="file-download">
          Download
        </Button> */}
            <SaveEntryButton entry={entry} />
            {/* <Button minimal icon="book-open">
          Cite
        </Button> */}
            <FollowEntryButton entry={entry} />
            {!isAutogenerated && (
              <Popover2
                usePortal={false}
                isOpen={actionsOpen}
                onClose={() => setActionsOpen(false)}
                content={
                  <div className="flex flex-col">
                    {isUserAuthor && (
                      <>
                        {/* <Button minimal icon="note-text">
                      Edit
                    </Button> */}
                        <Button
                          minimal
                          icon="trash"
                          onClick={async () => {
                            setActionsOpen(false);

                            await api.entry.delete({
                              entryId: entry.id,
                            });

                            analytics.events.track('ext.entry.deleted', {
                              title: entry.title,
                              id: entry.id,
                            });

                            const parent = entry.parent;
                            parent && goToBrowse(parent);
                          }}
                        >
                          Delete
                        </Button>
                      </>
                    )}
                    {/* <hr className="my-1" /> */}
                    {/* <Button minimal icon="clock">
                  History
                </Button> */}
                    {/* <Button minimal icon="email">
                  Share
                </Button> */}
                    {!isUserAuthor && (
                      <Button
                        minimal
                        className="rounded-none"
                        icon="flag-2"
                        onClick={() => {
                          goToReport(entry);
                          setActionsOpen(false);
                        }}
                      >
                        Report
                      </Button>
                    )}
                  </div>
                }
                minimal
                position="bottom-right"
                popoverClassName="shadow-none shadow-lg border border-gray-200"
              >
                <Button
                  icon="more-vert"
                  minimal
                  onClick={() => {
                    setActionsOpen(!actionsOpen);
                  }}
                />
              </Popover2>
            )}
          </div>
        )}
      </div>

      <div className="mb-0.5 grid grid-cols-m1 items-center gap-1 overflow-hidden">
        <FormatMeta format={entry.format as NarrowFormat} />
        <EntryLinkedTo
          entry={entry}
          as="div"
          onClick={() => {
            if (!entry.parent) {
              return;
            }

            goToBrowse(entry.parent);
          }}
        />
      </div>

      <EntryTitle title={entry.title} className="mb-3 font-semibold" />

      <FormatContentComponent
        isPreview
        query=""
        format={entry.format as NarrowFormat}
        data={
          {
            // TODO
          }
        }
        setData={() => {}}
      />

      {entry.files && entry.files.length > 0 && (
        <div className="pt-3">
          <FilesInput files={entry.files} />
        </div>
      )}

      <div className="flex flex-col gap-1 pt-3">
        <EntryPostingMeta
          entry={entry}
          type="posted"
          as="div"
          onClick={() => {
            goToUser(entry.createdBy.id);
          }}
        />

        {/* <EntryTags entry={entry} /> */}
      </div>
    </div>
  );
};
